{
  "permissions": {
    "allow": [
      "WebFetch(domain:www.instagram.com)",
      "WebFetch(domain:github.com)",
      "mcp__filesystem__create_directory",
      "mcp__filesystem__write_file",
      "Bash(./.claude/scripts/generate-commands-launcher.sh:*)",
      "Bash(chmod:*)",
      "Bash(node:*)",
      "Bash(npx:*)",
      "mcp__filesystem__list_directory",
      "Bash(python:*)",
      "Bash(django-admin startproject:*)",
      "mcp__filesystem__read_text_file",
      "mcp__filesystem__directory_tree",
      "mcp__filesystem__edit_file",
      "mcp__filesystem__search_files",
      "Bash(mkdir:*)",
      "mcp__filesystem__read_multiple_files",
      "Bash(pip install:*)",
      "Bash(rm:*)",
      "Bash(ls:*)",
      "Bash(find:*)",
      "Bash(grep:*)",
      "Bash(taskkill:*)",
      "Bash(venvScripts:*)",
      "Bash(source:*)",
      "Bash(venv/Scripts/pip.exe install:*)",
      "Bash(venv/Scripts/python.exe manage.py:*)",
      "Bash(venv/Scripts/python.exe create_admin.py:*)",
      "Bash(venv/Scripts/python.exe create_business_info.py:*)",
      "WebFetch(domain:www.doordash.com)",
      "Bash(venv/Scripts/python.exe create_real_menu_data.py:*)",
      "Bash(venv/Scripts/python.exe create_sample_recipes_and_staff.py:*)",
      "Bash(venv/Scripts/python.exe:*)",
      "Bash(\"venv\\Scripts\\python.exe\" manage.py runserver 8001)",
      "Bash(curl:*)",
      "Bash(\"venv\\Scripts\\python.exe\" comprehensive_system_test.py)",
      "Bash(\"venv\\Scripts\\python.exe\" test_final_admin.py)",
      "Bash(\"venv\\Scripts\\python.exe\" add_comprehensive_menu.py)",
      "Bash(\"venv\\Scripts\\python.exe\" manage.py makemigrations core)",
      "Bash(\"venv\\Scripts\\python.exe\" manage.py migrate)",
      "Bash(\"venv\\Scripts\\python.exe\" update_business_info.py)",
      "Bash(\"venv\\Scripts\\python.exe\" -c \"\nimport os\nimport django\nos.environ[''DJANGO_SETTINGS_MODULE''] = ''white_raven_pourhouse.settings''\ndjango.setup()\n\nfrom menu.models import MenuItem, Category\n\n# Test menu item access and editing\nprint(''=== Testing Admin Functionality ==='')\nprint()\n\nprint(''1. Testing Menu Item Access:'')\nitems = MenuItem.objects.all()[:5]\n\nfor item in items:\n    print(f''   • {item.name} - {item.display_price}'')\n    print(f''     Category: {item.category.name}'')\n    print(f''     Available: {item.available}'')\n    print(f''     Has Image: {bool(item.image)}'')\n    if item.image:\n        print(f''     Image Path: {item.image.name}'')\n    print()\n\nprint(''2. Testing Price Editing (simulation):'')\nif items:\n    test_item = items[0]\n    original_price = test_item.price\n    print(f''   Original price for \\''{test_item.name}\\'': {test_item.display_price}'')\n    \n    # Simulate price change\n    test_item.price = original_price + 0.50\n    test_item.save()\n    print(f''   New price after edit: {test_item.display_price}'')\n    \n    # Revert price\n    test_item.price = original_price\n    test_item.save()\n    print(f''   Reverted price: {test_item.display_price}'')\n    print()\n\nprint(''3. Testing Image Field Access:'')\nitems_with_images = MenuItem.objects.exclude(image='''')[:3]\nitems_without_images = MenuItem.objects.filter(image='''')[:3]\n\nprint(f''   Items with images: {len(items_with_images)}'')\nfor item in items_with_images:\n    print(f''     • {item.name}: {item.image.name}'')\n\nprint(f''   Items without images: {len(items_without_images)}'')\nfor item in items_without_images:\n    print(f''     • {item.name}: No image'')\nprint()\n\nprint(''=== Admin functionality tests completed successfully! ==='')\n\")",
      "Bash(\"venv\\Scripts\\python.exe\" -c \"\nimport os\nimport django\nfrom decimal import Decimal\nos.environ[''DJANGO_SETTINGS_MODULE''] = ''white_raven_pourhouse.settings''\ndjango.setup()\n\nfrom menu.models import MenuItem, Category\n\nprint(''=== Admin Functionality Confirmation ==='')\nprint()\n\n# Test that we can edit prices\nprint(''✅ PRICE EDITING TEST:'')\ntest_item = MenuItem.objects.first()\noriginal_price = test_item.price\nprint(f''   Item: {test_item.name}'')\nprint(f''   Original price: {test_item.display_price}'')\n\n# Change price\ntest_item.price = original_price + Decimal(''0.50'')\ntest_item.save()\nprint(f''   After edit: {test_item.display_price}'')\n\n# Revert price\ntest_item.price = original_price\ntest_item.save()\nprint(f''   Reverted to: {test_item.display_price}'')\nprint()\n\n# Test image field\nprint(''✅ IMAGE FIELD TEST:'')\nprint(f''   Items with images: {MenuItem.objects.exclude(image=\"\"\"\").count()}'')\nprint(f''   Items without images: {MenuItem.objects.filter(image=\"\"\"\").count()}'')\nprint()\n\n# Test admin display fields\nprint(''✅ ADMIN DISPLAY FIELDS:'')\nsample_items = MenuItem.objects.all()[:3]\nfor item in sample_items:\n    print(f''   {item.name}:'')\n    print(f''     - Price display: {item.display_price}'')\n    print(f''     - Category: {item.category.name}'')\n    print(f''     - Available: {item.available}'')\n    print(f''     - Has image: {item.has_image()}'')\n    print()\n\nprint(''✅ All admin functionality is working correctly!'')\nprint(''✅ Prices can be edited through Django admin'')\nprint(''✅ Images can be uploaded through Django admin'')\nprint(''✅ All menu fields are accessible and editable'')\n\")",
      "Bash(\"venv\\Scripts\\python.exe\":*)",
      "Bash(timeout:*)",
      "Bash(git add:*)",
      "Bash(git push:*)",
      "Bash(git commit:*)"
    ],
    "deny": []
  }
}