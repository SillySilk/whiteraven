"""
Django settings for white_raven_pourhouse project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env.render file if it exists
env_file = BASE_DIR / '.env.render'
if env_file.exists():
    with open(env_file) as f:
        for line in f:
            if line.strip() and not line.startswith('#') and '=' in line:
                key, value = line.strip().split('=', 1)
                os.environ.setdefault(key, value)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', "django-insecure-ypppobm)sfyldd^vq4aiu&p*#lnn)-x%qvi3xk8+id0s=m@rws")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True').lower() == 'true'

ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', 'localhost,127.0.0.1,testserver').split(',')


# Application definition

INSTALLED_APPS = [
    "admin_interface",
    "colorfield",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Local apps
    "core",
    "menu",
    "staff",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # Security middleware for rate limiting and protection
    "core.middleware.SecurityMiddleware",
    "core.middleware.FileUploadSecurityMiddleware",
]

ROOT_URLCONF = "white_raven_pourhouse.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],  # Added templates directory
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "core.theme_context.admin_theme_colors",
                "core.theme_context.site_theme",
                "core.theme_context.business_info",
            ],
        },
    },
]

WSGI_APPLICATION = "white_raven_pourhouse.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Use DATABASE_URL if available (Render PostgreSQL), otherwise fallback
if 'DATABASE_URL' in os.environ:
    # Render PostgreSQL configuration
    DATABASES = {
        'default': dj_database_url.parse(os.environ.get('DATABASE_URL'))
    }
elif os.environ.get('PRODUCTION') == 'True':
    # PythonAnywhere MySQL configuration
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': os.environ.get('DB_NAME', 'username$database_name'),
            'USER': os.environ.get('DB_USER', 'username'),
            'PASSWORD': os.environ.get('DB_PASSWORD', ''),
            'HOST': os.environ.get('DB_HOST', 'username.mysql.pythonanywhere-services.com'),
            'PORT': '',
        }
    }
else:
    # Development SQLite configuration
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "America/Los_Angeles"  # Pacific Time for Felton, CA

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "/static/"
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Production static files configuration
if os.environ.get('PRODUCTION') == 'True':
    # Use Render-compatible static files path
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
    # WhiteNoise static file serving for production
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
else:
    STATIC_ROOT = BASE_DIR / "staticfiles"


# Media files configuration
MEDIA_URL = "/media/"
if os.environ.get('PRODUCTION') == 'True':
    # Use Render-compatible media files path
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
else:
    MEDIA_ROOT = BASE_DIR / "media"


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Security settings for production
if os.environ.get('PRODUCTION') == 'True':
    # HTTPS Security Headers
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_SSL_REDIRECT = True
    SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'
    
    # Cookie Security
    SESSION_COOKIE_SECURE = True
    SESSION_COOKIE_HTTPONLY = True
    SESSION_COOKIE_SAMESITE = 'Strict'
    SESSION_EXPIRE_AT_BROWSER_CLOSE = True
    SESSION_COOKIE_AGE = 3600  # 1 hour session timeout
    
    CSRF_COOKIE_SECURE = True
    CSRF_COOKIE_HTTPONLY = True
    CSRF_COOKIE_SAMESITE = 'Strict'
    CSRF_COOKIE_AGE = 3600  # 1 hour CSRF token timeout
    
    # Additional Security Headers
    SECURE_CROSS_ORIGIN_OPENER_POLICY = 'same-origin'
    
    # Content Security Policy
    CSP_DEFAULT_SRC = ["'self'"]
    CSP_SCRIPT_SRC = ["'self'", "'unsafe-inline'", "cdn.jsdelivr.net", "cdnjs.cloudflare.com"]
    CSP_STYLE_SRC = ["'self'", "'unsafe-inline'", "cdn.jsdelivr.net", "fonts.googleapis.com"]
    CSP_FONT_SRC = ["'self'", "fonts.gstatic.com", "cdn.jsdelivr.net"]
    CSP_IMG_SRC = ["'self'", "data:", "blob:"]
    CSP_CONNECT_SRC = ["'self'"]
    CSP_FRAME_ANCESTORS = ["'none'"]
    CSP_BASE_URI = ["'self'"]
    CSP_FORM_ACTION = ["'self'"]
    
    # Rate limiting (requests per minute)
    RATE_LIMIT_LOGIN = 5  # 5 login attempts per minute
    RATE_LIMIT_CONTACT = 3  # 3 contact form submissions per minute
    RATE_LIMIT_GENERAL = 60  # 60 general requests per minute
    
else:
    # Development security settings (still secure but less restrictive)
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'
    SESSION_COOKIE_HTTPONLY = True
    CSRF_COOKIE_HTTPONLY = True
    SESSION_COOKIE_AGE = 7200  # 2 hours for development
    CSRF_COOKIE_AGE = 7200
    SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'
    
    # Development CSP (more permissive)
    CSP_DEFAULT_SRC = ["'self'"]
    CSP_SCRIPT_SRC = ["'self'", "'unsafe-inline'", "'unsafe-eval'", "cdn.jsdelivr.net"]
    CSP_STYLE_SRC = ["'self'", "'unsafe-inline'", "cdn.jsdelivr.net", "fonts.googleapis.com"]
    CSP_FONT_SRC = ["'self'", "fonts.gstatic.com", "cdn.jsdelivr.net"]
    CSP_IMG_SRC = ["'self'", "data:", "blob:"]
    
    # Rate limiting (more permissive for development)
    RATE_LIMIT_LOGIN = 10
    RATE_LIMIT_CONTACT = 5
    RATE_LIMIT_GENERAL = 120


# Email configuration for contact forms and notifications
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # Development

# Production email settings
if os.environ.get('PRODUCTION') == 'True':
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.gmail.com')
    EMAIL_PORT = int(os.environ.get('EMAIL_PORT', '587'))
    EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True').lower() == 'true'
    EMAIL_USE_SSL = os.environ.get('EMAIL_USE_SSL', 'False').lower() == 'true'
    EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')
    EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')
    EMAIL_TIMEOUT = 60  # Timeout for email sending

# Default email addresses
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'noreply@whiteravenpourhouse.com')
SERVER_EMAIL = DEFAULT_FROM_EMAIL  # For error emails

# Email subject prefix for notifications
EMAIL_SUBJECT_PREFIX = '[White Raven Pourhouse] '

# Admin email settings for notifications
ADMINS = []
admin_email = os.environ.get('ADMIN_EMAIL', '')
if admin_email:
    ADMINS = [('White Raven Pourhouse Admin', admin_email)]

MANAGERS = ADMINS  # Managers receive broken link notifications


# Authentication and authorization settings
LOGIN_URL = '/admin/login/'
LOGIN_REDIRECT_URL = '/admin/'
LOGOUT_REDIRECT_URL = '/'

# Force authentication for admin pages
LOGIN_REQUIRED_URLS = [
    r'/admin/',
    r'/staff/',
]

# Password security requirements
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 12,  # Increased from default 8
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Account lockout protection
ACCOUNT_LOCKOUT_THRESHOLD = 5  # Lock account after 5 failed attempts
ACCOUNT_LOCKOUT_DURATION = 1800  # Lock for 30 minutes
ACCOUNT_LOCKOUT_RESET_ON_SUCCESS = True


# File upload settings and security
FILE_UPLOAD_MAX_MEMORY_SIZE = 5242880  # 5MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 5242880  # 5MB
FILE_UPLOAD_PERMISSIONS = 0o644  # Secure file permissions
FILE_UPLOAD_DIRECTORY_PERMISSIONS = 0o755  # Secure directory permissions

# Secure file upload validation
ALLOWED_IMAGE_EXTENSIONS = ['.jpg', '.jpeg', '.png', '.webp']  # Removed .gif for security
ALLOWED_MIME_TYPES = [
    'image/jpeg',
    'image/jpg',  # Some systems use this variant
    'image/png', 
    'image/webp',
    'image/pjpeg',  # Progressive JPEG
    'image/x-png',  # Alternative PNG MIME type
]
MAX_UPLOAD_SIZE = 5242880  # 5MB maximum file size

# File upload security - block dangerous file types
BLOCKED_EXTENSIONS = [
    '.exe', '.bat', '.cmd', '.com', '.pif', '.scr', '.vbs', '.js', '.jar',
    '.php', '.asp', '.aspx', '.jsp', '.py', '.pl', '.rb', '.sh', '.ps1',
    '.html', '.htm', '.xml', '.svg'  # SVG can contain scripts
]

# Security scanning for uploaded files
SCAN_UPLOADS = True  # Enable virus/malware scanning if available
QUARANTINE_SUSPICIOUS_UPLOADS = True


# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
        'detailed': {
            'format': '[{asctime}] {levelname} {name}: {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
            'level': 'INFO',
        },
        'file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': BASE_DIR / 'logs' / 'white_raven.log',
            'formatter': 'detailed',
            'maxBytes': 1024*1024*5,  # 5 MB
            'backupCount': 5,
            'level': 'INFO',
        },
        'error_file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': BASE_DIR / 'logs' / 'errors.log',
            'formatter': 'verbose',
            'maxBytes': 1024*1024*10,  # 10 MB
            'backupCount': 10,
            'level': 'ERROR',
        },
        'security_file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': BASE_DIR / 'logs' / 'security.log',
            'formatter': 'verbose',
            'maxBytes': 1024*1024*5,  # 5 MB
            'backupCount': 5,
            'level': 'WARNING',
        },
    },
    'loggers': {
        # Root logger
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        # Application-specific loggers
        'core.email_utils': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True,
        },
        'core.views': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.core.mail': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True,
        },
        'core.forms': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True,
        },
        'core.middleware': {
            'handlers': ['console', 'file', 'security_file'],
            'level': 'WARNING',  # Log security warnings and errors
            'propagate': True,
        },
        'menu.utils.image_processing': {
            'handlers': ['console', 'file', 'security_file'],
            'level': 'WARNING',  # Log image security issues
            'propagate': True,
        },
        'django.security': {
            'handlers': ['console', 'file', 'security_file'],
            'level': 'WARNING',
            'propagate': True,
        },
        # Database errors
        'django.db.backends': {
            'handlers': ['console', 'error_file'],
            'level': 'ERROR',
            'propagate': True,
        },
        # Request errors
        'django.request': {
            'handlers': ['console', 'error_file'],
            'level': 'ERROR',
            'propagate': True,
        },
    },
}

# Add email notifications for critical errors in production
if os.environ.get('PRODUCTION') == 'True':
    # Add email handler for critical errors
    LOGGING['handlers']['mail_admins'] = {
        'class': 'django.utils.log.AdminEmailHandler',
        'level': 'ERROR',
        'formatter': 'verbose',
        'include_html': True,
    }
    
    # Add email handler to critical loggers
    LOGGING['loggers']['django.request']['handlers'].append('mail_admins')
    LOGGING['loggers']['django.db.backends']['handlers'].append('mail_admins')
    
    # Set up admin email notifications
    ADMINS = [
        ('Rose Woolf', 'rose@whiteravenpourhouse.com'),
        ('White Raven Admin', 'admin@whiteravenpourhouse.com'),
    ]
    
    # Server admin emails (for technical issues)
    MANAGERS = ADMINS

# Create logs directory if it doesn't exist
import os
log_dir = BASE_DIR / 'logs'
if not os.path.exists(log_dir):
    os.makedirs(log_dir)